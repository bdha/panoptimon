#!/usr/bin/env ruby

require 'json'
require 'rubygems'
require 'ostruct'

config = JSON::parse(ARGV[0])

$stdout.sync = true

def GB b; (b.to_f / 1024**3).round(6); end # GB significant down to 4kB

def get_mounts
  mount_hash = {}
  mounts = File.open("/etc/mtab", "r").read.split("\n").map{|l| l.split(/\s+/)}
  mounts.map{|m| mount_hash[m[0]] = m[1] unless %w[devpts udev sysfs tmpfs none proc].include?(m[0])}
  mount_hash
end

def stat_fs (mount)
  s = %x[stat --printf="%s %b %f %a %c %d" -f #{mount}].split(/\s+/).map{|i| i.to_i}
  o = OpenStruct.new
  o.block_size = s[0]
  o.blocks = s[1]
  o.blocks_free = s[2]
  o.blocks_available = s[3]
  o.files = s[4]
  o.files_available = s[5]
  o
end

while(true) do
  info =
    get_mounts.
    map {|d, m|
      s = stat_fs(m)
      [d, {
        space_used: GB((s.blocks - s.blocks_free) * s.block_size),
        space_free: GB(s.blocks_available         * s.block_size),
        space_priv: GB((s.blocks_free - s.blocks_available) * s.block_size),
        files_used: s.files - s.files_available,
        files_free: s.files_available,
      }]
    }
  puts JSON::generate(Hash[*info.flatten])

  break unless config.include?('interval')
  sleep config['interval']
end
