#!/usr/bin/env ruby
# Copyright (C) 2014 Cisco, Inc.

require 'json'
require 'ostruct'

require 'panoptimon/util'

config = ARGV[0] ? JSON::parse(ARGV[0]) : {'interval' => 60}

$stdout.sync = true

def numerize(stats)
  ret = [];
  # stats is an array of strings
  stats.each{ |stat|
    if (/^\d+[KMG]$/ =~ stat)
      case
      when stat[-1] == 'K'
        ret.push(Integer(stat[0..-2]))
      when stat[-1] == 'M'
        ret.push(Integer(stat[0..-2])*1024)
      when stat[-1] == 'G'
        ret.push(Integer(stat[0..-2])*1024*1024)
      end
    elsif (/\%$/ =~ stat)
      ret.push(Float(stat[0..-2]));
    elsif (/^\d+:\d{2}:\d{2}$/ =~ stat)
      time = stat.split(":")
      ret.push(Integer(time[0])*3600 +
                 Integer(time[1])*60   +
                 Integer(time[2]))
    elsif (/^\d+$/ =~ stat)
      ret.push(Integer(stat))
    else
      ret.push(stat);
    end
  };
  return ret;
end
get_stats = ->() {
  Panoptimon::Util.os(
    solaris: ->() {
      ->() {
	stats = %x[prstat -t 1 1].split("\n")[0..-2].map { |line|
            line.gsub(/\s+/m, ' ').strip.split(" ")
        };
        stat_fields = stats.shift().map { |each| each.downcase };
        stats = stats.map { |each| numerize(each) }
        stats.map { |stat| 
            Hash[stat_fields[1..-1].zip(stat[1..-1])];
        }
      }
    },
  )

}[]

loop do
  stats = get_stats[];
  $?.success? or fail "prstat unhappy #{$?.exitstatus}"
  users = stats.map {|s| [ s["username"], s.tap{|u| u.delete("username")} ]};
  puts JSON::generate(Hash[users]);

  break unless config.include?('interval')
  sleep config['interval']
end
